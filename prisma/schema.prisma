// Supreme Price Tracker Database Schema
// Based on memory-bank/systemPatterns.md

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core item information
model Item {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  brand       String   @default("Supreme")
  imageUrl    String?  @map("image_url")
  season      String?
  styleCode   String?  @map("style_code")
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  variants    Variant[]
  
  @@map("items")
}

// Item variants (size, color combinations)
model Variant {
  id       String  @id @default(cuid())
  itemId   String  @map("item_id")
  size     String
  color    String
  
  // Relations
  item     Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  prices   Price[]
  alerts   PriceAlert[]
  
  @@unique([itemId, size, color])
  @@map("variants")
}

// Historical price data (append-only for full history)
model Price {
  id         String      @id @default(cuid())
  variantId  String      @map("variant_id")
  platform   Platform
  priceUsd   Decimal     @map("price_usd") @db.Decimal(10, 2)
  currency   String      @default("USD")
  askOrBid   PriceType   @map("ask_or_bid")
  capturedAt DateTime    @default(now()) @map("captured_at")
  
  // Relations
  variant    Variant     @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  @@index([variantId, platform, capturedAt])
  @@index([capturedAt])
  @@map("prices")
}

// User accounts and authentication
model User {
  id         String       @id @default(cuid())
  email      String       @unique
  name       String?
  avatarUrl  String?      @map("avatar_url")
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  
  // Relations
  watchlist  Watchlist[]
  alerts     PriceAlert[]
  
  @@map("users")
}

// User watchlists (followed items)
model Watchlist {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  variantId String   @map("variant_id")
  addedAt   DateTime @default(now()) @map("added_at")
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  variant   Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  @@unique([userId, variantId])
  @@map("watchlist")
}

// Price alerts for users
model PriceAlert {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  variantId     String      @map("variant_id")
  platform      Platform?   // null = any platform
  targetPrice   Decimal     @map("target_price") @db.Decimal(10, 2)
  condition     AlertCondition // above, below, equal
  isActive      Boolean     @default(true) @map("is_active")
  lastTriggered DateTime?   @map("last_triggered")
  createdAt     DateTime    @default(now()) @map("created_at")
  
  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  variant       Variant     @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  @@map("price_alerts")
}

// Enums
enum Platform {
  STOCKX  @map("stockx")
  GOAT    @map("goat")
  GRAILED @map("grailed")
}

enum PriceType {
  ASK  @map("ask")
  BID  @map("bid")
  LAST @map("last")
}

enum AlertCondition {
  ABOVE @map("above")
  BELOW @map("below")
  EQUAL @map("equal")
} 